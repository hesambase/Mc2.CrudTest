<h3>DeleteCustomer</h3>

@page "/deletecustomer/{Id}"
@using Mc2.CrudTest.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
<h2>Delete Customer</h2>
@if (customer != null)
{
    <p>Are you sure you want to delete this customer with Name: <b>@customer.FirstName @customer.LastName</b></p>
    <div class="row">
           <table class="table">
                   <tr>
                           <td>Name</td>
                           <td>@customer.FirstName @customer.LastName</td>
                       </tr>
                   <tr>
                           <td>Email</td>
                           <td>@customer.Email</td>
                       </tr>
                   <tr>
                           <td>Phone Number</td>
                           <td>@customer.PhoneNumber</td>
                       </tr>
               </table>
    </div>
}
<div class="row">
        <div class="col-md-4">
                <div class="form-group">
                        <input type="button" class="btn btn-primary" @onclick="@Delete" value="Delete" />
                        <input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
                    </div>
            </div>
</div>
@code {
    [Parameter]
    public string Id { get; set; }
    CustomerViewModel person = new CustomerViewModel();
    protected override async Task OnInitializedAsync()
    {
        person = await Http.GetFromJsonAsync<CustomerViewModel>("api/customer/" + Id);
    }
    protected async Task Delete()
    {
        var response = await Http.DeleteAsync("api/customer/" + Id);
        bool deleteResponse = await response.Content.ReadFromJsonAsync<bool>();
        if (deleteResponse)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Deleted Successfully!");
            NavigationManager.NavigateTo("customerlist");
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("customerlist");
    }
        }
